//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""9582ee63-06aa-4f41-a405-177f58f1159e"",
            ""actions"": [
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Button"",
                    ""id"": ""6fd2b519-7a94-473a-9cb8-859d0183ea31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RotateCamera"",
                    ""type"": ""Button"",
                    ""id"": ""17dfcd3f-5615-4484-9761-be81cd4a3642"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomCamera"",
                    ""type"": ""Value"",
                    ""id"": ""236c42f0-5a2b-493b-9ab2-6fc28a067395"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FocusOnCastle"",
                    ""type"": ""Button"",
                    ""id"": ""ee5adf58-d96d-4577-9ff0-e810d465cbfa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FocusOnSelected"",
                    ""type"": ""Button"",
                    ""id"": ""b27307f3-4309-48b8-ab17-9ffe55c5677e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4587174c-e96d-40ff-8fa0-c5bc8878608c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef272824-c2d4-4f0d-a592-17c434475720"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6996a5f3-3fb0-4a0c-8415-1de981b668f4"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9796c0da-1bb7-4c1f-a8cf-48912bfeba2b"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FocusOnCastle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e1bd272-39ec-4ab3-b164-269afec0c7b8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FocusOnSelected"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Globals"",
            ""id"": ""920c043d-8725-4093-a8a8-c7be3288145f"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""d79aab93-93ee-4984-9d41-d306f16622dd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4df28123-0089-4ac4-94e2-190485e21494"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Units"",
            ""id"": ""4302afca-313d-4e6e-bcc1-c84782033b72"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""b7e61cbc-6789-4201-a389-0d59178e6a74"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c6744168-56eb-4aca-96f0-7eceb88fffa5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""81c4e350-c7d8-4f20-ab9c-b6bb1c58a6a5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""102508e4-666a-42bf-8f3f-1d8733c15852"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_MoveCamera = m_Camera.FindAction("MoveCamera", throwIfNotFound: true);
        m_Camera_RotateCamera = m_Camera.FindAction("RotateCamera", throwIfNotFound: true);
        m_Camera_ZoomCamera = m_Camera.FindAction("ZoomCamera", throwIfNotFound: true);
        m_Camera_FocusOnCastle = m_Camera.FindAction("FocusOnCastle", throwIfNotFound: true);
        m_Camera_FocusOnSelected = m_Camera.FindAction("FocusOnSelected", throwIfNotFound: true);
        // Globals
        m_Globals = asset.FindActionMap("Globals", throwIfNotFound: true);
        m_Globals_MousePosition = m_Globals.FindAction("MousePosition", throwIfNotFound: true);
        // Units
        m_Units = asset.FindActionMap("Units", throwIfNotFound: true);
        m_Units_Select = m_Units.FindAction("Select", throwIfNotFound: true);
        m_Units_Interact = m_Units.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_MoveCamera;
    private readonly InputAction m_Camera_RotateCamera;
    private readonly InputAction m_Camera_ZoomCamera;
    private readonly InputAction m_Camera_FocusOnCastle;
    private readonly InputAction m_Camera_FocusOnSelected;
    public struct CameraActions
    {
        private @InputActions m_Wrapper;
        public CameraActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveCamera => m_Wrapper.m_Camera_MoveCamera;
        public InputAction @RotateCamera => m_Wrapper.m_Camera_RotateCamera;
        public InputAction @ZoomCamera => m_Wrapper.m_Camera_ZoomCamera;
        public InputAction @FocusOnCastle => m_Wrapper.m_Camera_FocusOnCastle;
        public InputAction @FocusOnSelected => m_Wrapper.m_Camera_FocusOnSelected;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @MoveCamera.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveCamera;
                @MoveCamera.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnMoveCamera;
                @RotateCamera.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotateCamera;
                @RotateCamera.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnRotateCamera;
                @ZoomCamera.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoomCamera;
                @ZoomCamera.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoomCamera;
                @ZoomCamera.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoomCamera;
                @FocusOnCastle.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnFocusOnCastle;
                @FocusOnCastle.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnFocusOnCastle;
                @FocusOnCastle.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnFocusOnCastle;
                @FocusOnSelected.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnFocusOnSelected;
                @FocusOnSelected.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnFocusOnSelected;
                @FocusOnSelected.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnFocusOnSelected;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveCamera.started += instance.OnMoveCamera;
                @MoveCamera.performed += instance.OnMoveCamera;
                @MoveCamera.canceled += instance.OnMoveCamera;
                @RotateCamera.started += instance.OnRotateCamera;
                @RotateCamera.performed += instance.OnRotateCamera;
                @RotateCamera.canceled += instance.OnRotateCamera;
                @ZoomCamera.started += instance.OnZoomCamera;
                @ZoomCamera.performed += instance.OnZoomCamera;
                @ZoomCamera.canceled += instance.OnZoomCamera;
                @FocusOnCastle.started += instance.OnFocusOnCastle;
                @FocusOnCastle.performed += instance.OnFocusOnCastle;
                @FocusOnCastle.canceled += instance.OnFocusOnCastle;
                @FocusOnSelected.started += instance.OnFocusOnSelected;
                @FocusOnSelected.performed += instance.OnFocusOnSelected;
                @FocusOnSelected.canceled += instance.OnFocusOnSelected;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Globals
    private readonly InputActionMap m_Globals;
    private IGlobalsActions m_GlobalsActionsCallbackInterface;
    private readonly InputAction m_Globals_MousePosition;
    public struct GlobalsActions
    {
        private @InputActions m_Wrapper;
        public GlobalsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_Globals_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Globals; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalsActions set) { return set.Get(); }
        public void SetCallbacks(IGlobalsActions instance)
        {
            if (m_Wrapper.m_GlobalsActionsCallbackInterface != null)
            {
                @MousePosition.started -= m_Wrapper.m_GlobalsActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_GlobalsActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_GlobalsActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_GlobalsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public GlobalsActions @Globals => new GlobalsActions(this);

    // Units
    private readonly InputActionMap m_Units;
    private IUnitsActions m_UnitsActionsCallbackInterface;
    private readonly InputAction m_Units_Select;
    private readonly InputAction m_Units_Interact;
    public struct UnitsActions
    {
        private @InputActions m_Wrapper;
        public UnitsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Units_Select;
        public InputAction @Interact => m_Wrapper.m_Units_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Units; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitsActions set) { return set.Get(); }
        public void SetCallbacks(IUnitsActions instance)
        {
            if (m_Wrapper.m_UnitsActionsCallbackInterface != null)
            {
                @Select.started -= m_Wrapper.m_UnitsActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_UnitsActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_UnitsActionsCallbackInterface.OnSelect;
                @Interact.started -= m_Wrapper.m_UnitsActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_UnitsActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_UnitsActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_UnitsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public UnitsActions @Units => new UnitsActions(this);
    public interface ICameraActions
    {
        void OnMoveCamera(InputAction.CallbackContext context);
        void OnRotateCamera(InputAction.CallbackContext context);
        void OnZoomCamera(InputAction.CallbackContext context);
        void OnFocusOnCastle(InputAction.CallbackContext context);
        void OnFocusOnSelected(InputAction.CallbackContext context);
    }
    public interface IGlobalsActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IUnitsActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
